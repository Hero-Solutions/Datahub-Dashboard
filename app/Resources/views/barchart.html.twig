
<div>
    <div id="barchart{{ index }}">
    </div>
    {{ graph.bottomLegend | raw }}
</div>
<script>

    //Set font-sizes of labels

    var bigFontSize = "16px";
    var smallFontSize = "13px";

    //Set margin outside the chart

    var marginSize = 20;

    if({{ graph.isEmpty | json_encode | raw }}) {
        if("{{ graph.emptyText | raw }}".length > 0) {
            var para = document.createElement("p");
            var node = document.createTextNode("{{ graph.emptyText|raw }}");
            para.setAttribute("class", "empty-text");
            para.setAttribute("align", "center");
            para.appendChild(node);
            var barChart = document.getElementById("barchart{{ index }}");
            barChart.appendChild(para);
        }
    }
    else {
        var colours = ["#00BCE4", "#087D93"];
        var legendText = "{{ graph.legendText | raw }}";
        var hasLegend = legendText.length > 0;
        var canDownload = {{ graph.canDownload | json_encode | raw }};
        data = d3.csv.parse({{ graph.data | json_encode | raw }}, function(d) {
            return {
                field:d.field.replace(";", ","),
                name:d.name.replace(";", ","),
                value:+d.value,
                col:d.col
            };
        });
        data.reverse();
        var dataRange = 0;
        for (var i = 0; i < data.length; i++) {
            if (data[i].value > dataRange)
                dataRange = data[i].value;
        }

        var max = {{ graph.max | json_encode | raw }};

        //Calculate the top margin

        //Height of chart title
        var title = textSize("{{ graph.header | raw }}", bigFontSize);
        var titleHeight = title.height;

        //Set padding for title to 16
        var titlePadding = 16;

        //Size of the margin above the svg
        var marginTop = marginSize + titleHeight + titlePadding;

        //Calculate the right margin

        //Width of the largest value among the imported data (label to the right of the largest bar)
        var maxValue = 0;
        for (var i = 0; i < data.length; i++) {
            if(data[i].value > maxValue)
                maxValue = data[i].value;
        }
        var maxChartWidth = max;
        if(maxValue > maxChartWidth) {
            maxChartWidth = maxValue;
        }
        var widthValue = textSize(maxValue, smallFontSize);
        var rightLabelWidth = widthValue.width;

        //Set padding for label to the right of the bars to 6
        var rightLabelPadding = 6;

        //Size of the margin right of the svg
        var marginRight = marginSize + rightLabelWidth + rightLabelPadding;

        //Calculate the bottom margin

        if(max > 0) {
            //Ticks are 6 heigh by default, tick padding is 3 by default
            var xTickWidth = 6;
            var xTickPadding = 3;

            //Calculate possible height of text of tick for x axis
            var xTickText = textSize("0123456789", smallFontSize);
            var xTickTextHeight = xTickText.height;

            //Size of the margin beneath the svg
            var marginBottom = marginSize + xTickTextHeight + xTickPadding + xTickWidth;
        }

        else {
            //Size of the margin beneath the svg
            var marginBottom = marginSize
        }

        //Calculate the left margin

        //Width of the largest name among the imported data (largest label to the left of the bars)
        var leftLabelWidth = 0;
        var widthName = 0;
        for (var i = 0; i < data.length; i++) {
            widthName = textSize(data[i].name, smallFontSize);
            widthName = widthName.width;
            if(widthName > leftLabelWidth)
                leftLabelWidth = widthName;
        }
        if(hasLegend) {
            leftLabelWidth += 10;
            if(marginBottom < 120) {
                marginBottom = 120;
            }
        }

        //Set padding for label to the left of the bars to 6
        var leftLabelPadding = 6;

        //Size of the margin left of the svg
        var marginLeft = marginSize + leftLabelWidth + leftLabelPadding;

        //Set margins
        var margin = {
            top: marginTop,
            right: marginRight,
            bottom: marginBottom,
            left: marginLeft
        };

        var width = 758 - margin.left - margin.right,
            height = data.length * 26;

        var viewBoxWidth = width + margin.left + margin.right;
        var viewBoxHeight = height + margin.top + margin.bottom;

        var svg = d3.select("#barchart{{ index }}").append("svg")
            .attr("viewBox", "0 0 " + viewBoxWidth + " " + viewBoxHeight)
            .append("g")
            .attr("transform", "translate(" + margin.left + "," + margin.top + ")");

        var x = d3.scale.linear()
            .range([0, maxChartWidth > 0 ? dataRange / maxChartWidth * width : width ])
            .domain([0, d3.max(data, function (d) {
                return d.value;
            })]);

        var xScale = d3.scale.linear()
            .range([0, width ])
            .domain([0, maxChartWidth]);

        var y = d3.scale.ordinal()
            .rangeBands([height, 0], .1)
            .domain(data.map(function (d) {
                return d.name;
            }));

        if(max > 0) {
            var xAxis = d3.svg.axis()
                .scale(xScale)
                .orient("bottom")
                .tickValues(xScale.ticks(0).concat([0, max]))
                .tickFormat(d3.format("f"));

            svg.append("g")
                .attr("class", "x axis")
                .attr("transform", "translate(0," + height + ")")
                .call(xAxis)
                .selectAll(".tick text")
                .style("font-size", smallFontSize)
                .style("font-family", "'Gotham', Helvetica, Arial, sans-serif");
        }

        //make y axis to show bar names
        var yAxis = d3.svg.axis()
            .scale(y)
            //no tick marks
            .tickSize(0)
            .orient("left");

        svg.append("g")
            .attr("class", "y axis y-axis")
            .attr("transform", "translate(" + (-leftLabelPadding) + "," + 0 + ")")
            .call(yAxis)
            .selectAll(".tick text")
            .style("font-size", smallFontSize)
            .style("font-family", "'Gotham', Helvetica, Arial, sans-serif")
            .attr("class", (canDownload ? "clickable-" : "") + "graph-label");

        var bars = svg.selectAll(".bar")
            .data(data)
            .enter()
            .append("g");

        svg.selectAll(".clickable-graph-label")
            .data(data);

        //append rects
        bars.append("rect")
            .attr("class", function(d) {
                var className = "bar bar" + d.col;
                return className + (canDownload ? " clickable-bar" : "");
            })
            .attr("y", function (d) {
                return y(d.name);
            })
            .attr("height", y.rangeBand())
            .attr("x", 0)
            .attr("width", function (d) {
                var w = x(d.value);
                return d.value > 0 && w < 1 ? 1 : w;
            });

        //add a value label to the right of each bar
        bars.append("text")
            .style("font-size", smallFontSize)
            .style("font-family", "'Gotham', Helvetica, Arial, sans-serif")
            .attr("class", "graph-value")
            //y position of the label is halfway down the bar
            .attr("y", function (d) {
                return y(d.name) + y.rangeBand() / 2 + 4;
            })
            //x position is 6 pixels to the right of the bar
            .attr("x", function (d) {
                return x(d.value) + rightLabelPadding;
            })
            .text(function (d) {
                return d.value;
            });

        if(canDownload) {
            svg.selectAll(".bar,.clickable-graph-label").on("click", function (d) {
                location.assign("{{ route | raw }}/{{ active_aspect | raw }}/{{ active_parameter | raw }}/{{ active_question | raw }}/{{ graph.type | raw }}/" + d.field);
            });
        }

        svg.append("text")
            .attr("x", 0)
            .attr("y", -titlePadding)
            .style("font-size", bigFontSize)
            .style("font-family", "'Gotham', Helvetica, Arial, sans-serif")
            .style("text-anchor", "right")
            .text("{{ graph.header | raw }}");


        if(hasLegend) {
            svg.append("text")      // title for the y-axis
                .attr("y", -margin.left + 15)
                .attr("x", data.length > 4 ? - height / 2 + margin.top + 13 : 0)
                .attr("transform", "rotate(-90)")
                .style("text-anchor", "end")
                .style("font-size", bigFontSize)
                .style("font-family", "'Gotham', Helvetica, Arial, sans-serif")
                .text(legendText);
        }
    }

//https://gist.github.com/huytd/327e453c95ca3edadb32d0c867e2561b
//This function measures text size in pixels
    function textSize(text, fontSize) {
        if (!d3) return;
        var container = d3.select("body").append("svg");
        
        container.append("text")
            .attr({ x: -99999, y: -99999 })
            .style("font-size", fontSize)
            .style("font-family", "'Gotham', Helvetica, Arial, sans-serif")
            .text(text);
        
        var size = container.node().getBBox();
        container.remove();
        return { width: size.width, height: size.height };
    }

</script>
