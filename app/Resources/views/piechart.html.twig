
<div><div id="piechart{{ index }}" class="graph-div">
</div>
    {% if graph.canDownload %}
        {% include 'download.html.twig' %}
    {% endif %}
</div>
<script>

    //Set font-sizes of labels

    var bigFontSize = "16px";
    var smallFontSize = "13px";
    var pieChart = document.getElementById("piechart{{ index }}");

    if({{ graph.isEmpty | json_encode | raw }}) {
        var emptyText = "{{ graph.emptyText | raw }}";
        if(emptyText.length > 0) {
            var para = document.createElement("p");
            var node = document.createTextNode(emptyText);
            para.setAttribute("class", "empty-text");
            para.setAttribute("align", "center");
            para.appendChild(node);
            pieChart.appendChild(para);
        }
    }
    else {
        var w = 758;
        var r = 150;
        var labelR = 175;
        var marginSize = 20;
        var h = r * 2 + marginSize * 2;
        var cols = ["#00BCE4", "#05E9FF", "#087D93", "#0EBFC0", "#50A6B9"];
        var lastCol = "#FFFFFF";

        var data = {{ graph.data | raw }};
        var vis = d3.select('#piechart{{ index }}')
            .append("svg:svg")
            .data([data])
            .attr("viewBox", "0 0 " + w + " " + h)
            .append("svg:g")
            .attr("transform", "translate(" + (w / 2) + "," + (r + marginSize) + ")");

        var pie = d3.layout.pie().value(function (d) {
            return d.value;
        }).sort(null);

        // Declare an arc generator function
        var arc = d3.svg.arc().outerRadius(r);

        // Select paths, use arc generator to draw
        var arcs = vis.selectAll("g.slice").data(pie).enter();

        arcs.append("svg:path")
            .attr("fill", function (d, i) {
                return i == data.length - 1 ? lastCol : i < cols.length ? cols[i] : cols[i % cols.length];
            })
            .attr("d", function (d) {
                return arc(d);
            });

        // Add the labels
        textLabels = arcs.append("svg:text")
            .attr("x", function (d) {
                d.innerRadius = 0;
                d.outerRadius = r;
                return arc.centroid(d)[0];
            })
            .attr("y", function (d) {
                d.innerRadius = 0;
                d.outerRadius = r;
                return arc.centroid(d)[1];
            })
            .attr("text-anchor", "middle")
            .style("font-size", smallFontSize)
            .style("font-family", "'Gotham', Helvetica, Arial, sans-serif")
            .attr("class", "pie" + {{ index }} + "-0-label")
            .text(function (d, i) {
                return data[i].value > 0 ? data[i].label : "";
            });

        if({{ graph.isFull | json_encode | raw }}) {
            var para = document.createElement("p");
            var node = document.createTextNode("{{ graph.fullText | raw }}");
            para.setAttribute("align", "center");
            para.appendChild(node);
            pieChart.appendChild(para);
        }


        alpha = 0.5;
        spacing = 12;

        function relaxPieChart() {
            again = false;
            textLabels.each(function (d, i) {
                a = this;
                da = d3.select(a);
                y1 = da.attr("y");
                textLabels.each(function (d, j) {
                    b = this;
                    // a & b are the same element and don't collide.
                    if (a == b) return;
                    db = d3.select(b);
                    // a & b are on opposite sides of the chart and
                    // don't collide
                    if (da.attr("text-anchor") != db.attr("text-anchor")
                        || da.attr("class") != db.attr("class")) return;
                    // Now let's calculate the distance between
                    // these elements.
                    y2 = db.attr("y");
                    deltaY = y1 - y2;

                    // Our spacing is greater than our specified spacing,
                    // so they don't collide.
                    if (Math.abs(deltaY) > spacing) return;

                    // If the labels collide, we'll push each
                    // of the two labels up and down a little bit.
                    again = true;
                    sign = deltaY > 0 ? 1 : -1;
                    adjust = sign * alpha;
                    da.attr("y",+y1 + adjust);
                    db.attr("y",+y2 - adjust);
                });
            });
            if(again) {
                setTimeout(relaxPieChart, 20)
            }
        }

        relaxPieChart();
    }
</script>
