
<div><div id="piecharts{{ index }}" class="graph-div">
    </div>
    {% if graph.canDownload %}
        {% include 'download.html.twig' %}
    {% endif %}
</div>
<script>

    //Set font-sizes of labels

    var bigFontSize = "16px";
    var smallFontSize = "13px";
    var pieChart = document.getElementById("piecharts{{ index }}");

    if({{ graph.isEmpty | json_encode | raw }}) {
        var para = document.createElement("p");
        var node = document.createTextNode("{{ graph.emptyText|raw }}");
        para.setAttribute("class", "empty-text");
        para.setAttribute("align", "center");
        para.appendChild(node);
        pieChart.appendChild(para);
    }
    else {
        var rawData = {{ graph.data|raw }};
        var data = [];
        var labels = [];
        for (var i = 0; i < rawData.length; i++) {
            var data_ = [];
            var labels_ = [];
            for(var key in rawData[i]) {
                data_.push(rawData[i][key]);
                labels_.push(key);
            }
            data.push(data_);
            labels.push(labels_);
        }

        var m = 20,
            r = 86;
        var cols = ["#00BCE4", "#05E9FF", "#087D93", "#0EBFC0", "#50A6B9"];
        var lastCol = "#FFFFFF";

        var svg = d3.select('#piecharts{{ index }}').selectAll("svg")
            .data(data)
            .enter()
            .append("svg")
            .attr("width", (r + m*2) * 2)
            .attr("height", (r + m) * 2)
            .append("g")
            .attr("class", "slice")
            .attr("transform", "translate(" + (r + m*2) + "," + (r + m) + ")");


        // Declare an arc generator function
        var arc = d3.svg.arc().outerRadius(r);

        // The data for each svg element is a row of numbers (an array). We pass that to
        // d3.layout.pie to compute the angles for each arc. These start and end angles
        // are passed to d3.svg.arc to draw arcs! Note that the arc radius is specified
        // on the arc, not the layout.
        var arcs = svg.selectAll("path")
            .data(d3.layout.pie().sort(null))
            .enter();

        var index = 0;
        arcs.append("path")
            .attr("d", function (d) {
                return arc(d);
            })
            .style("fill", function (d, i) {
                var ret = i == data[index].length - 1 ? lastCol : i < cols.length ? cols[i] : cols[i % cols.length];
                if(i == data[index].length - 1) {
                    index++;
                }
                return ret;
            });

        var index1 = 0;
        var index2 = 0;
        textLabels = arcs.append("svg:text")
            .attr("x", function (d) {
                d.innerRadius = 0;
                d.outerRadius = r;
                return arc.centroid(d)[0];
            })
            .attr("y", function (d) {
                d.innerRadius = 0;
                d.outerRadius = r;
                return arc.centroid(d)[1];
            })
            .attr("text-anchor", "middle")
            .style("font-size", smallFontSize)
            .style("font-family", "'Gotham', Helvetica, Arial, sans-serif")
            .attr("class", function(d, i) {
                var ret = "pie" + {{ index }} + "-" + index2 + "-label";
                if(i == data[index2].length - 1) {
                    index2++;
                }
                return ret;
            })
            .text(function (d, i) {
                var ret = data[index1][i] > 0 ? labels[index1][i] : "";
                if(i == data[index1].length - 1) {
                    index1++;
                }
                return ret;
            });

        if({{ graph.isFull | json_encode | raw }}) {
            var para = document.createElement("p");
            var node = document.createTextNode("{{ graph.fullText | raw }}");
            para.setAttribute("align", "center");
            para.appendChild(node);
            pieChart.appendChild(para);
        }

        alpha = 0.5;
        spacing = 12;

        function relaxPieCharts() {
            again = false;
            textLabels.each(function (d, i) {
                a = this;
                da = d3.select(a);
                y1 = da.attr("y");
                val = d.value;
                textLabels.each(function (d, j) {
                    b = this;
                    // a & b are the same element and don't collide.
                    if (a == b) return;
                    db = d3.select(b);
                    // a & b are on opposite sides of the chart and
                    // don't collide
                    if (da.attr("text-anchor") != db.attr("text-anchor")
                        || da.attr("class") != db.attr("class")) return;
                    // Now let's calculate the distance between
                    // these elements.
                    y2 = db.attr("y");
                    deltaY = y1 - y2;

                    // Our spacing is greater than our specified spacing,
                    // so they don't collide.
                    if (Math.abs(deltaY) > spacing) return;

                    // If the labels collide, we'll push each
                    // of the two labels up and down a little bit.
                    again = true;
                    sign = deltaY > 0 ? 1 : -1;
                    adjust = sign * alpha;
                    da.attr("y", +y1 + adjust);
                    db.attr("y", +y2 - adjust);
                });
            });
            if(again) {
                setTimeout(relaxPieCharts, 20)
            }
        }

        relaxPieCharts();
    }
</script>

